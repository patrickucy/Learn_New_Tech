day03
{AM1}
一、Modal View Controller	
	1.	显示一个新的View Controller
		0)	构建一个新的ViewController类
			必要时创建对应的nib文件
		1)	初始化新viewController对象
		2)	presentViewController:animated:completion:
	2.	设置跳转的动画效果
		secondViewController.modalTransitionStyle
	3.	回到上一个ViewController
		在第二个VC调用
		dismissViewControllerAnimated:completion:
二、多VC下的MVC结构
		独立结构
		每个用户看到的界面 大多都是一个MVC组合
		这个界面由这个Controller进行控制
		
		新的界面要有新的MVC组合
		新的界面由新的Controller进行控制
		
		两个界面进行跳转
		要在controller写 打开 和 关闭的相关代码
		
		两个界面进行数据交互
		主界面 -> 子界面
			通过property的值注入
		子界面 -> 主界面 返回
			通过自定义委托
三、多个ViewController 之间的通信
	1.	主界面为子界面赋值
		1)	子界面构建显示控件
		2)	子界面构建存放数据的property
		3)	主界面构建子界面
		4)	主界面为子界面的数据赋值
		5)	主界面调用消息显示子界面
		6)	在子界面的viewWillAppear消息内
			根据数据更新显示控件
		{AM2}
			[P05]
				第一界面 有一个UITextField
				和一个Button
				点击按钮后
				在第二界面的Label上显示第一个界面输入的文字
	2.	子界面通过委托向主界面返回值
		大概的步骤
		1)	创建子界面
		2)	子界面执行相关显示代码
		3)	子界面在完成任务后要把结果返回给（主界面）
			self.delegate
		
		子界面方面
		0)	基本规则
			协议名称必须是类名去掉ViewController加上Delegate
			所有在委托协议下的消息，都必须返回XXXxxxxXxxxxxx 
			而且作为第一参数
		1)	声明一个XXXxxxxXxxxxxxDelegate协议
			协议用于在子界面工作时/后 
			跟负责它（创建它）的界面进行沟通
		2)	声明一个id<XXXxxxxXxxxxxxDelegate> delegate 属性
		3)	在需要外部帮助的时候/在需要返回值的时候
			调用委托的响应消息
			[self.delegate xxxxxxxxxxx];
		
		主界面方面
		1)	声明符合XXXxxxxXxxxxxxDelegate协议
		2)	实现协议中你感兴趣的消息
		3)	创建子界面
		4)	将子界面的delegate设置为self
		5)	展示子界面
		
			[P06]
			第一个界面上有一个label和一个button
			用户点击按钮之后打开第二个界面
			
			第二个界面上有一个button和一个textField
			用户点击这个按钮之后 第二个界面关闭
			返回到第一个界面的时候 
			label是刚才第二个textField上的文字
			第二个界面的类名
			TRSingleLineInputViewController
			第二个界面的委托的消息里的第二个参数
			inputText:(NSString *) text;
	{PM2}
四、补充
	 1.	tag
	 	用于标记一个view下的子view
	 	区分view
	 2.	id 类型 和 其它类型的区别
	 	- (IBAction)tap:(id)sender {
	 		UISlider * slider = sender;
	 	执行上来讲 没有任何区别
	 	
	 	sender. 点不出来
	 	[sender 所有声明过的消息];
	 	
	 	slider. 点出来 在UISlider及其所有父类里声明过的property
	 	[slider 出现在UISlider及其所有父类里声明过的消息提示];

五、UINavigationController
	1.	长什么样（Setting）
	2.	是什么？
		Controller的Controller
	3.	干嘛用？
		维持Controller之间的创建/显示关系
	4.	怎么用
		1)	保证主界面被UINavigationController包含
			initWithRootViewController:
		2)	创建子界面
		3)	把子界面推给NavigationController
			self.navigationController pushViewController:animated:
		4)	子界面回退主界面
			self.navigationController popViewControllerAnimated:
	[P07]
		界面1上有一个label上面写着10 
		下面有一个按钮 点击后 将界面2推进
		界面2上有个label写着9
		下面也有一个按钮
	作业
	0.	复习代码
	1.	VC之前的传值
	2.	[P07+]
		为TRCountDownViewController增加一个
		int count的property
		在每次创建TRCountDownViewController时 
		为它创建合适的值
		1>	根界面 直接设置10
		2>	不是根界面 设置的值是自己的count-1
		在处理按钮点击的时候
		创建的不是别的VC 就是自己同样的VC 
		只不过设置的值不一样
		
		3>  label的字体大小也跟着count
		4>	当count为0时， button消失（hidden）
	3.	做一个文本创建器
		界面1 有一个按钮“创建文本”
		用户点击之后跳转到界面2（两种跳转方式任意选择）
		
		界面2 
		文字 [  可输入框     ]
		x [     ]  y [     ]
		w [     ]  h [     ]
		(	按钮“确定”		)
		当用户点击确定后，
		界面2收回
		界面1根据界面2的信息在界面1上addsubview:label
		
		TRLabelCreaterViewController
		消息的第二个参数传UILabel类型
	
	
	
	
	
	
	
	
	
	
	
		
		
		

		
		
		
		
		
			
			
			
			
		
	

			

		
	
		
	 