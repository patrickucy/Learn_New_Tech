{AM1}
一、Core Graphic
	1.	状态
		在做任何操作之前都需要保存状态
		在做操作之后需要恢复状态（整体恢复）
		
		你在操作中设置的填充颜色、线条颜色、阴影
		线条大小、线头cap样式......
		都会被修改而无法直接恢复.
	2.	Bezier曲线
{AM2}
二、 Table View
	0.	cell
		1>	使用系统的4种基本样式
		2>	使用accessoryView 增加助理视图
		3>	在请求cell的消息内直接为cell的contentView
			增加子view
		4>	在nib文件内创建一个cell的nib
	1.	自定义Cell
		1)	继承UITableViewCell
		2)	覆盖draw消息
		3)	在tableview上注册Class
		4)	如果高度是变化的 需要回答tableview高度问询问题
	[优化]
		增加TRMessage类
		message:NSString	你好
		from:NSString		别人:小三 自己:nil
		
		为TRViewController增加
		messages:NSArray
			-> 各种TRMessage
		
		在AppDelegate里为TRViewController注入
		各种假数据
{PM1}
三、系统控件美化
	1.	图像拉伸
		1)	用在哪？
			navigationBar
			button
			文本外边（weibo／短消息）
			可输入栏的外边
{PM2}
	2.	View（了解 理解）
		什么时候用
			1. 自定义控件
			
		在自定义view的时候
		可以为view增加子视图
		每个view的执行顺序
		1)	系统调用view的draw方法
		2)	系统检查view内有没有其它的subview
			系统就会调用view的layoutSubviews
				（你需要在这个消息内调整子视图的位置和大小）
			系统会继续调用子视图的draw方法
				并把绘制的结果粘贴在当前view的指定区域内
	{PM3}			
	3.	标准美化
		tintColor
		backgroundImage

	4.	UIAppereance
		改一个
		[slider setTintColor:grayColor];
		全改
    	[[UISlider appearance]setTintColor:];
    	
    	1. 	BarButtonItem
    	2. 	UIButton
    	3.	UINavigationBar
    	4.	UIToolBar
    	
   作业（）：
   	0. 复习代码
   	1.
   	优化消息
   	为TRMessageCell增加一个
   	from:NSString
   	属性
   	运行时检查
   	如果from是nil
   	则图片加载message_i
   	并且放在右边
   	如果from不是nil
   	则图片加载message_other
   	并且放在左边
   	
	
		
		 
				
		
	
		
		
		